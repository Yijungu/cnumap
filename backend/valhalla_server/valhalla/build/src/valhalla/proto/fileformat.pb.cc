// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: fileformat.proto
// Protobuf C++ Version: 5.29.1

#include "fileformat.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace OSMPBF {

inline constexpr BlobHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        indexdata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        datasize_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BlobHeader::BlobHeader(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BlobHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlobHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlobHeaderDefaultTypeInternal() {}
  union {
    BlobHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlobHeaderDefaultTypeInternal _BlobHeader_default_instance_;

inline constexpr Blob::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        raw_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        zlib_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        lzma_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        obsolete_bzip2_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        raw_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Blob::Blob(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BlobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlobDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlobDefaultTypeInternal() {}
  union {
    Blob _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlobDefaultTypeInternal _Blob_default_instance_;
}  // namespace OSMPBF
namespace OSMPBF {
// ===================================================================

class Blob::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Blob>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Blob, _impl_._has_bits_);
};

Blob::Blob(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.Blob)
}
inline PROTOBUF_NDEBUG_INLINE Blob::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::OSMPBF::Blob& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        raw_(arena, from.raw_),
        zlib_data_(arena, from.zlib_data_),
        lzma_data_(arena, from.lzma_data_),
        obsolete_bzip2_data_(arena, from.obsolete_bzip2_data_) {}

Blob::Blob(
    ::google::protobuf::Arena* arena,
    const Blob& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Blob* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.raw_size_ = from._impl_.raw_size_;

  // @@protoc_insertion_point(copy_constructor:OSMPBF.Blob)
}
inline PROTOBUF_NDEBUG_INLINE Blob::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        raw_(arena),
        zlib_data_(arena),
        lzma_data_(arena),
        obsolete_bzip2_data_(arena) {}

inline void Blob::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.raw_size_ = {};
}
Blob::~Blob() {
  // @@protoc_insertion_point(destructor:OSMPBF.Blob)
  SharedDtor(*this);
}
inline void Blob::SharedDtor(MessageLite& self) {
  Blob& this_ = static_cast<Blob&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.raw_.Destroy();
  this_._impl_.zlib_data_.Destroy();
  this_._impl_.lzma_data_.Destroy();
  this_._impl_.obsolete_bzip2_data_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Blob::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Blob(arena);
}
constexpr auto Blob::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Blob),
                                            alignof(Blob));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<12> Blob::_class_data_ = {
    {
        &_Blob_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Blob::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Blob>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Blob::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Blob>(), &Blob::ByteSizeLong,
            &Blob::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Blob, _impl_._cached_size_),
        true,
    },
    "OSMPBF.Blob",
};
const ::google::protobuf::internal::ClassData* Blob::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> Blob::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Blob, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::OSMPBF::Blob>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes raw = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Blob, _impl_.raw_)}},
    // optional int32 raw_size = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(Blob, _impl_.raw_size_)}},
    // optional bytes zlib_data = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(Blob, _impl_.zlib_data_)}},
    // optional bytes lzma_data = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(Blob, _impl_.lzma_data_)}},
    // optional bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
    {::_pbi::TcParser::FastBS1,
     {42, 3, 0, PROTOBUF_FIELD_OFFSET(Blob, _impl_.obsolete_bzip2_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes raw = 1;
    {PROTOBUF_FIELD_OFFSET(Blob, _impl_.raw_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 raw_size = 2;
    {PROTOBUF_FIELD_OFFSET(Blob, _impl_.raw_size_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bytes zlib_data = 3;
    {PROTOBUF_FIELD_OFFSET(Blob, _impl_.zlib_data_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes lzma_data = 4;
    {PROTOBUF_FIELD_OFFSET(Blob, _impl_.lzma_data_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Blob, _impl_.obsolete_bzip2_data_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Blob::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.Blob)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.raw_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.zlib_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.lzma_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.obsolete_bzip2_data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.raw_size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Blob::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Blob& this_ = static_cast<const Blob&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Blob::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Blob& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.Blob)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional bytes raw = 1;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_raw();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // optional int32 raw_size = 2;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_raw_size(), target);
          }

          // optional bytes zlib_data = 3;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_zlib_data();
            target = stream->WriteBytesMaybeAliased(3, _s, target);
          }

          // optional bytes lzma_data = 4;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_lzma_data();
            target = stream->WriteBytesMaybeAliased(4, _s, target);
          }

          // optional bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_obsolete_bzip2_data();
            target = stream->WriteBytesMaybeAliased(5, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.Blob)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Blob::ByteSizeLong(const MessageLite& base) {
          const Blob& this_ = static_cast<const Blob&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Blob::ByteSizeLong() const {
          const Blob& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:OSMPBF.Blob)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // optional bytes raw = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_raw());
            }
            // optional bytes zlib_data = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_zlib_data());
            }
            // optional bytes lzma_data = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_lzma_data());
            }
            // optional bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_obsolete_bzip2_data());
            }
            // optional int32 raw_size = 2;
            if (cached_has_bits & 0x00000010u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_raw_size());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Blob::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Blob*>(&to_msg);
  auto& from = static_cast<const Blob&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.Blob)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_raw(from._internal_raw());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_zlib_data(from._internal_zlib_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_lzma_data(from._internal_lzma_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_obsolete_bzip2_data(from._internal_obsolete_bzip2_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.raw_size_ = from._impl_.raw_size_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Blob::CopyFrom(const Blob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.Blob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Blob::InternalSwap(Blob* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_, &other->_impl_.raw_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zlib_data_, &other->_impl_.zlib_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.lzma_data_, &other->_impl_.lzma_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.obsolete_bzip2_data_, &other->_impl_.obsolete_bzip2_data_, arena);
        swap(_impl_.raw_size_, other->_impl_.raw_size_);
}

// ===================================================================

class BlobHeader::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BlobHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BlobHeader, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

BlobHeader::BlobHeader(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.BlobHeader)
}
inline PROTOBUF_NDEBUG_INLINE BlobHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::OSMPBF::BlobHeader& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        type_(arena, from.type_),
        indexdata_(arena, from.indexdata_) {}

BlobHeader::BlobHeader(
    ::google::protobuf::Arena* arena,
    const BlobHeader& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BlobHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.datasize_ = from._impl_.datasize_;

  // @@protoc_insertion_point(copy_constructor:OSMPBF.BlobHeader)
}
inline PROTOBUF_NDEBUG_INLINE BlobHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        type_(arena),
        indexdata_(arena) {}

inline void BlobHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.datasize_ = {};
}
BlobHeader::~BlobHeader() {
  // @@protoc_insertion_point(destructor:OSMPBF.BlobHeader)
  SharedDtor(*this);
}
inline void BlobHeader::SharedDtor(MessageLite& self) {
  BlobHeader& this_ = static_cast<BlobHeader&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.type_.Destroy();
  this_._impl_.indexdata_.Destroy();
  this_._impl_.~Impl_();
}

inline void* BlobHeader::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BlobHeader(arena);
}
constexpr auto BlobHeader::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(BlobHeader),
                                            alignof(BlobHeader));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<18> BlobHeader::_class_data_ = {
    {
        &_BlobHeader_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        BlobHeader::IsInitializedImpl,
        &BlobHeader::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<BlobHeader>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BlobHeader::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<BlobHeader>(), &BlobHeader::ByteSizeLong,
            &BlobHeader::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BlobHeader, _impl_._cached_size_),
        true,
    },
    "OSMPBF.BlobHeader",
};
const ::google::protobuf::internal::ClassData* BlobHeader::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> BlobHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BlobHeader, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::OSMPBF::BlobHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required string type = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BlobHeader, _impl_.type_)}},
    // optional bytes indexdata = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(BlobHeader, _impl_.indexdata_)}},
    // required int32 datasize = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(BlobHeader, _impl_.datasize_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required string type = 1;
    {PROTOBUF_FIELD_OFFSET(BlobHeader, _impl_.type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes indexdata = 2;
    {PROTOBUF_FIELD_OFFSET(BlobHeader, _impl_.indexdata_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // required int32 datasize = 3;
    {PROTOBUF_FIELD_OFFSET(BlobHeader, _impl_.datasize_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void BlobHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.BlobHeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.indexdata_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.datasize_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BlobHeader::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BlobHeader& this_ = static_cast<const BlobHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BlobHeader::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BlobHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.BlobHeader)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required string type = 1;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_type();
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // optional bytes indexdata = 2;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_indexdata();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          // required int32 datasize = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_datasize(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.BlobHeader)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BlobHeader::ByteSizeLong(const MessageLite& base) {
          const BlobHeader& this_ = static_cast<const BlobHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BlobHeader::ByteSizeLong() const {
          const BlobHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:OSMPBF.BlobHeader)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // required string type = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_type());
            }
          }
           {
            // optional bytes indexdata = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_indexdata());
            }
          }
           {
            // required int32 datasize = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_datasize());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void BlobHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BlobHeader*>(&to_msg);
  auto& from = static_cast<const BlobHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.BlobHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_indexdata(from._internal_indexdata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.datasize_ = from._impl_.datasize_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlobHeader::CopyFrom(const BlobHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.BlobHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BlobHeader::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const BlobHeader&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void BlobHeader::InternalSwap(BlobHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.indexdata_, &other->_impl_.indexdata_, arena);
        swap(_impl_.datasize_, other->_impl_.datasize_);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace OSMPBF
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
