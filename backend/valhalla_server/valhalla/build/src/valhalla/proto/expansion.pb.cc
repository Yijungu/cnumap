// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: expansion.proto
// Protobuf C++ Version: 5.29.1

#include "expansion.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace valhalla {

inline constexpr Expansion_Geometry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : coords_{},
        _coords_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Expansion_Geometry::Expansion_Geometry(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Expansion_GeometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expansion_GeometryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expansion_GeometryDefaultTypeInternal() {}
  union {
    Expansion_Geometry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expansion_GeometryDefaultTypeInternal _Expansion_Geometry_default_instance_;

inline constexpr Expansion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : costs_{},
        _costs_cached_byte_size_{0},
        durations_{},
        _durations_cached_byte_size_{0},
        distances_{},
        _distances_cached_byte_size_{0},
        edge_status_{},
        _edge_status_cached_byte_size_{0},
        edge_id_{},
        _edge_id_cached_byte_size_{0},
        pred_edge_id_{},
        _pred_edge_id_cached_byte_size_{0},
        geometries_{},
        expansion_type_{},
        _expansion_type_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Expansion::Expansion(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExpansionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpansionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpansionDefaultTypeInternal() {}
  union {
    Expansion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpansionDefaultTypeInternal _Expansion_default_instance_;
}  // namespace valhalla
namespace valhalla {
PROTOBUF_CONSTINIT const uint32_t Expansion_EdgeStatus_internal_data_[] = {
    196608u, 0u, };
bool Expansion_EdgeStatus_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Expansion_EdgeStatus_strings[3] = {};

static const char Expansion_EdgeStatus_names[] = {
    "connected"
    "reached"
    "settled"
};

static const ::google::protobuf::internal::EnumEntry Expansion_EdgeStatus_entries[] =
    {
        {{&Expansion_EdgeStatus_names[0], 9}, 0},
        {{&Expansion_EdgeStatus_names[9], 7}, 2},
        {{&Expansion_EdgeStatus_names[16], 7}, 1},
};

static const int Expansion_EdgeStatus_entries_by_number[] = {
    0,  // 0 -> connected
    2,  // 1 -> settled
    1,  // 2 -> reached
};

const std::string& Expansion_EdgeStatus_Name(Expansion_EdgeStatus value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Expansion_EdgeStatus_entries, Expansion_EdgeStatus_entries_by_number,
          3, Expansion_EdgeStatus_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Expansion_EdgeStatus_entries, Expansion_EdgeStatus_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Expansion_EdgeStatus_strings[idx].get();
}

bool Expansion_EdgeStatus_Parse(absl::string_view name, Expansion_EdgeStatus* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Expansion_EdgeStatus_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Expansion_EdgeStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Expansion_EdgeStatus Expansion::connected;
constexpr Expansion_EdgeStatus Expansion::settled;
constexpr Expansion_EdgeStatus Expansion::reached;
constexpr Expansion_EdgeStatus Expansion::EdgeStatus_MIN;
constexpr Expansion_EdgeStatus Expansion::EdgeStatus_MAX;
constexpr int Expansion::EdgeStatus_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t Expansion_ExpansionType_internal_data_[] = {
    131072u, 0u, };
bool Expansion_ExpansionType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Expansion_ExpansionType_strings[2] = {};

static const char Expansion_ExpansionType_names[] = {
    "forward"
    "reverse"
};

static const ::google::protobuf::internal::EnumEntry Expansion_ExpansionType_entries[] =
    {
        {{&Expansion_ExpansionType_names[0], 7}, 0},
        {{&Expansion_ExpansionType_names[7], 7}, 1},
};

static const int Expansion_ExpansionType_entries_by_number[] = {
    0,  // 0 -> forward
    1,  // 1 -> reverse
};

const std::string& Expansion_ExpansionType_Name(Expansion_ExpansionType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Expansion_ExpansionType_entries, Expansion_ExpansionType_entries_by_number,
          2, Expansion_ExpansionType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Expansion_ExpansionType_entries, Expansion_ExpansionType_entries_by_number, 2,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Expansion_ExpansionType_strings[idx].get();
}

bool Expansion_ExpansionType_Parse(absl::string_view name, Expansion_ExpansionType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Expansion_ExpansionType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Expansion_ExpansionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Expansion_ExpansionType Expansion::forward;
constexpr Expansion_ExpansionType Expansion::reverse;
constexpr Expansion_ExpansionType Expansion::ExpansionType_MIN;
constexpr Expansion_ExpansionType Expansion::ExpansionType_MAX;
constexpr int Expansion::ExpansionType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Expansion_Geometry::_Internal {
 public:
};

Expansion_Geometry::Expansion_Geometry(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Expansion.Geometry)
}
inline PROTOBUF_NDEBUG_INLINE Expansion_Geometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::Expansion_Geometry& from_msg)
      : coords_{visibility, arena, from.coords_},
        _coords_cached_byte_size_{0},
        _cached_size_{0} {}

Expansion_Geometry::Expansion_Geometry(
    ::google::protobuf::Arena* arena,
    const Expansion_Geometry& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Expansion_Geometry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:valhalla.Expansion.Geometry)
}
inline PROTOBUF_NDEBUG_INLINE Expansion_Geometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : coords_{visibility, arena},
        _coords_cached_byte_size_{0},
        _cached_size_{0} {}

inline void Expansion_Geometry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Expansion_Geometry::~Expansion_Geometry() {
  // @@protoc_insertion_point(destructor:valhalla.Expansion.Geometry)
  SharedDtor(*this);
}
inline void Expansion_Geometry::SharedDtor(MessageLite& self) {
  Expansion_Geometry& this_ = static_cast<Expansion_Geometry&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Expansion_Geometry::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Expansion_Geometry(arena);
}
constexpr auto Expansion_Geometry::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Expansion_Geometry, _impl_.coords_) +
          decltype(Expansion_Geometry::_impl_.coords_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Expansion_Geometry), alignof(Expansion_Geometry), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Expansion_Geometry::PlacementNew_,
                                 sizeof(Expansion_Geometry),
                                 alignof(Expansion_Geometry));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<28> Expansion_Geometry::_class_data_ = {
    {
        &_Expansion_Geometry_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Expansion_Geometry::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Expansion_Geometry>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Expansion_Geometry::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Expansion_Geometry>(), &Expansion_Geometry::ByteSizeLong,
            &Expansion_Geometry::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Expansion_Geometry, _impl_._cached_size_),
        true,
    },
    "valhalla.Expansion.Geometry",
};
const ::google::protobuf::internal::ClassData* Expansion_Geometry::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Expansion_Geometry::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::Expansion_Geometry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated sint32 coords = 1 [packed = true];
    {::_pbi::TcParser::FastZ32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Expansion_Geometry, _impl_.coords_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated sint32 coords = 1 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Expansion_Geometry, _impl_.coords_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Expansion_Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Expansion.Geometry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coords_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Expansion_Geometry::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Expansion_Geometry& this_ = static_cast<const Expansion_Geometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Expansion_Geometry::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Expansion_Geometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.Expansion.Geometry)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated sint32 coords = 1 [packed = true];
          {
            int byte_size = this_._impl_._coords_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteSInt32Packed(
                  1, this_._internal_coords(), byte_size, target);
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.Expansion.Geometry)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Expansion_Geometry::ByteSizeLong(const MessageLite& base) {
          const Expansion_Geometry& this_ = static_cast<const Expansion_Geometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Expansion_Geometry::ByteSizeLong() const {
          const Expansion_Geometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.Expansion.Geometry)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated sint32 coords = 1 [packed = true];
            {
              total_size +=
                  ::_pbi::WireFormatLite::SInt32SizeWithPackedTagSize(
                      this_._internal_coords(), 1,
                      this_._impl_._coords_cached_byte_size_);
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Expansion_Geometry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Expansion_Geometry*>(&to_msg);
  auto& from = static_cast<const Expansion_Geometry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Expansion.Geometry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_coords()->MergeFrom(from._internal_coords());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Expansion_Geometry::CopyFrom(const Expansion_Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Expansion.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Expansion_Geometry::InternalSwap(Expansion_Geometry* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.coords_.InternalSwap(&other->_impl_.coords_);
}

// ===================================================================

class Expansion::_Internal {
 public:
};

Expansion::Expansion(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Expansion)
}
inline PROTOBUF_NDEBUG_INLINE Expansion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::Expansion& from_msg)
      : costs_{visibility, arena, from.costs_},
        _costs_cached_byte_size_{0},
        durations_{visibility, arena, from.durations_},
        _durations_cached_byte_size_{0},
        distances_{visibility, arena, from.distances_},
        _distances_cached_byte_size_{0},
        edge_status_{visibility, arena, from.edge_status_},
        _edge_status_cached_byte_size_{0},
        edge_id_{visibility, arena, from.edge_id_},
        _edge_id_cached_byte_size_{0},
        pred_edge_id_{visibility, arena, from.pred_edge_id_},
        _pred_edge_id_cached_byte_size_{0},
        geometries_{visibility, arena, from.geometries_},
        expansion_type_{visibility, arena, from.expansion_type_},
        _expansion_type_cached_byte_size_{0},
        _cached_size_{0} {}

Expansion::Expansion(
    ::google::protobuf::Arena* arena,
    const Expansion& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Expansion* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:valhalla.Expansion)
}
inline PROTOBUF_NDEBUG_INLINE Expansion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : costs_{visibility, arena},
        _costs_cached_byte_size_{0},
        durations_{visibility, arena},
        _durations_cached_byte_size_{0},
        distances_{visibility, arena},
        _distances_cached_byte_size_{0},
        edge_status_{visibility, arena},
        _edge_status_cached_byte_size_{0},
        edge_id_{visibility, arena},
        _edge_id_cached_byte_size_{0},
        pred_edge_id_{visibility, arena},
        _pred_edge_id_cached_byte_size_{0},
        geometries_{visibility, arena},
        expansion_type_{visibility, arena},
        _expansion_type_cached_byte_size_{0},
        _cached_size_{0} {}

inline void Expansion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Expansion::~Expansion() {
  // @@protoc_insertion_point(destructor:valhalla.Expansion)
  SharedDtor(*this);
}
inline void Expansion::SharedDtor(MessageLite& self) {
  Expansion& this_ = static_cast<Expansion&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Expansion::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Expansion(arena);
}
constexpr auto Expansion::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Expansion, _impl_.costs_) +
          decltype(Expansion::_impl_.costs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Expansion, _impl_.durations_) +
          decltype(Expansion::_impl_.durations_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Expansion, _impl_.distances_) +
          decltype(Expansion::_impl_.distances_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Expansion, _impl_.edge_status_) +
          decltype(Expansion::_impl_.edge_status_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Expansion, _impl_.edge_id_) +
          decltype(Expansion::_impl_.edge_id_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Expansion, _impl_.pred_edge_id_) +
          decltype(Expansion::_impl_.pred_edge_id_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Expansion, _impl_.expansion_type_) +
          decltype(Expansion::_impl_.expansion_type_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Expansion, _impl_.geometries_) +
          decltype(Expansion::_impl_.geometries_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Expansion), alignof(Expansion), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Expansion::PlacementNew_,
                                 sizeof(Expansion),
                                 alignof(Expansion));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<19> Expansion::_class_data_ = {
    {
        &_Expansion_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Expansion::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Expansion>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Expansion::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Expansion>(), &Expansion::ByteSizeLong,
            &Expansion::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Expansion, _impl_._cached_size_),
        true,
    },
    "valhalla.Expansion",
};
const ::google::protobuf::internal::ClassData* Expansion::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 0, 2> Expansion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::Expansion>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .valhalla.Expansion.ExpansionType expansion_type = 8;
    {::_pbi::TcParser::FastV32P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Expansion, _impl_.expansion_type_)}},
    // repeated uint32 costs = 1 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Expansion, _impl_.costs_)}},
    // repeated uint32 durations = 2 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Expansion, _impl_.durations_)}},
    // repeated uint32 distances = 3 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Expansion, _impl_.distances_)}},
    // repeated .valhalla.Expansion.EdgeStatus edge_status = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Expansion, _impl_.edge_status_)}},
    // repeated uint32 edge_id = 5 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Expansion, _impl_.edge_id_)}},
    // repeated uint32 pred_edge_id = 6 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Expansion, _impl_.pred_edge_id_)}},
    // repeated .valhalla.Expansion.Geometry geometries = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Expansion, _impl_.geometries_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated uint32 costs = 1 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Expansion, _impl_.costs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated uint32 durations = 2 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Expansion, _impl_.durations_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated uint32 distances = 3 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Expansion, _impl_.distances_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated .valhalla.Expansion.EdgeStatus edge_status = 4;
    {PROTOBUF_FIELD_OFFSET(Expansion, _impl_.edge_status_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // repeated uint32 edge_id = 5 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Expansion, _impl_.edge_id_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated uint32 pred_edge_id = 6 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Expansion, _impl_.pred_edge_id_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated .valhalla.Expansion.Geometry geometries = 7;
    {PROTOBUF_FIELD_OFFSET(Expansion, _impl_.geometries_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.Expansion.ExpansionType expansion_type = 8;
    {PROTOBUF_FIELD_OFFSET(Expansion, _impl_.expansion_type_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::Expansion_Geometry>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Expansion::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Expansion)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.costs_.Clear();
  _impl_.durations_.Clear();
  _impl_.distances_.Clear();
  _impl_.edge_status_.Clear();
  _impl_.edge_id_.Clear();
  _impl_.pred_edge_id_.Clear();
  _impl_.geometries_.Clear();
  _impl_.expansion_type_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Expansion::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Expansion& this_ = static_cast<const Expansion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Expansion::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Expansion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.Expansion)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated uint32 costs = 1 [packed = true];
          {
            int byte_size = this_._impl_._costs_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  1, this_._internal_costs(), byte_size, target);
            }
          }

          // repeated uint32 durations = 2 [packed = true];
          {
            int byte_size = this_._impl_._durations_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  2, this_._internal_durations(), byte_size, target);
            }
          }

          // repeated uint32 distances = 3 [packed = true];
          {
            int byte_size = this_._impl_._distances_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  3, this_._internal_distances(), byte_size, target);
            }
          }

          // repeated .valhalla.Expansion.EdgeStatus edge_status = 4;
          {
            std::size_t byte_size =
                                              this_._impl_._edge_status_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  4, this_._internal_edge_status(), byte_size, target);
            }
          }

          // repeated uint32 edge_id = 5 [packed = true];
          {
            int byte_size = this_._impl_._edge_id_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  5, this_._internal_edge_id(), byte_size, target);
            }
          }

          // repeated uint32 pred_edge_id = 6 [packed = true];
          {
            int byte_size = this_._impl_._pred_edge_id_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  6, this_._internal_pred_edge_id(), byte_size, target);
            }
          }

          // repeated .valhalla.Expansion.Geometry geometries = 7;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_geometries_size());
               i < n; i++) {
            const auto& repfield = this_._internal_geometries().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    7, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.Expansion.ExpansionType expansion_type = 8;
          {
            std::size_t byte_size =
                                              this_._impl_._expansion_type_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  8, this_._internal_expansion_type(), byte_size, target);
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.Expansion)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Expansion::ByteSizeLong(const MessageLite& base) {
          const Expansion& this_ = static_cast<const Expansion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Expansion::ByteSizeLong() const {
          const Expansion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.Expansion)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated uint32 costs = 1 [packed = true];
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_costs(), 1,
                      this_._impl_._costs_cached_byte_size_);
            }
            // repeated uint32 durations = 2 [packed = true];
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_durations(), 1,
                      this_._impl_._durations_cached_byte_size_);
            }
            // repeated uint32 distances = 3 [packed = true];
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_distances(), 1,
                      this_._impl_._distances_cached_byte_size_);
            }
            // repeated .valhalla.Expansion.EdgeStatus edge_status = 4;
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_edge_status(), 1, this_._impl_._edge_status_cached_byte_size_);
            }
            // repeated uint32 edge_id = 5 [packed = true];
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_edge_id(), 1,
                      this_._impl_._edge_id_cached_byte_size_);
            }
            // repeated uint32 pred_edge_id = 6 [packed = true];
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_pred_edge_id(), 1,
                      this_._impl_._pred_edge_id_cached_byte_size_);
            }
            // repeated .valhalla.Expansion.Geometry geometries = 7;
            {
              total_size += 1UL * this_._internal_geometries_size();
              for (const auto& msg : this_._internal_geometries()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.Expansion.ExpansionType expansion_type = 8;
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_expansion_type(), 1, this_._impl_._expansion_type_cached_byte_size_);
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Expansion::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Expansion*>(&to_msg);
  auto& from = static_cast<const Expansion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Expansion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_costs()->MergeFrom(from._internal_costs());
  _this->_internal_mutable_durations()->MergeFrom(from._internal_durations());
  _this->_internal_mutable_distances()->MergeFrom(from._internal_distances());
  _this->_internal_mutable_edge_status()->MergeFrom(from._internal_edge_status());
  _this->_internal_mutable_edge_id()->MergeFrom(from._internal_edge_id());
  _this->_internal_mutable_pred_edge_id()->MergeFrom(from._internal_pred_edge_id());
  _this->_internal_mutable_geometries()->MergeFrom(
      from._internal_geometries());
  _this->_internal_mutable_expansion_type()->MergeFrom(from._internal_expansion_type());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Expansion::CopyFrom(const Expansion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Expansion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Expansion::InternalSwap(Expansion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.costs_.InternalSwap(&other->_impl_.costs_);
  _impl_.durations_.InternalSwap(&other->_impl_.durations_);
  _impl_.distances_.InternalSwap(&other->_impl_.distances_);
  _impl_.edge_status_.InternalSwap(&other->_impl_.edge_status_);
  _impl_.edge_id_.InternalSwap(&other->_impl_.edge_id_);
  _impl_.pred_edge_id_.InternalSwap(&other->_impl_.pred_edge_id_);
  _impl_.geometries_.InternalSwap(&other->_impl_.geometries_);
  _impl_.expansion_type_.InternalSwap(&other->_impl_.expansion_type_);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
