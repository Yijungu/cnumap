// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: isochrone.proto
// Protobuf C++ Version: 5.29.1

#include "isochrone.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace valhalla {

inline constexpr Isochrone_Geometry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : coords_{},
        _coords_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Isochrone_Geometry::Isochrone_Geometry(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Isochrone_GeometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Isochrone_GeometryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Isochrone_GeometryDefaultTypeInternal() {}
  union {
    Isochrone_Geometry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Isochrone_GeometryDefaultTypeInternal _Isochrone_Geometry_default_instance_;

inline constexpr Isochrone_Contour::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : geometries_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Isochrone_Contour::Isochrone_Contour(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Isochrone_ContourDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Isochrone_ContourDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Isochrone_ContourDefaultTypeInternal() {}
  union {
    Isochrone_Contour _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Isochrone_ContourDefaultTypeInternal _Isochrone_Contour_default_instance_;

inline constexpr Isochrone_Interval::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : contours_{},
        metric_{static_cast< ::valhalla::Isochrone_metric_type >(0)},
        metric_value_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Isochrone_Interval::Isochrone_Interval(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Isochrone_IntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Isochrone_IntervalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Isochrone_IntervalDefaultTypeInternal() {}
  union {
    Isochrone_Interval _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Isochrone_IntervalDefaultTypeInternal _Isochrone_Interval_default_instance_;

inline constexpr Isochrone::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : intervals_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Isochrone::Isochrone(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IsochroneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsochroneDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsochroneDefaultTypeInternal() {}
  union {
    Isochrone _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsochroneDefaultTypeInternal _Isochrone_default_instance_;
}  // namespace valhalla
namespace valhalla {
PROTOBUF_CONSTINIT const uint32_t Isochrone_metric_type_internal_data_[] = {
    131072u, 0u, };
bool Isochrone_metric_type_IsValid(int value) {
  return 0 <= value && value <= 1;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Isochrone_metric_type_strings[2] = {};

static const char Isochrone_metric_type_names[] = {
    "distance"
    "time"
};

static const ::google::protobuf::internal::EnumEntry Isochrone_metric_type_entries[] =
    {
        {{&Isochrone_metric_type_names[0], 8}, 1},
        {{&Isochrone_metric_type_names[8], 4}, 0},
};

static const int Isochrone_metric_type_entries_by_number[] = {
    1,  // 0 -> time
    0,  // 1 -> distance
};

const std::string& Isochrone_metric_type_Name(Isochrone_metric_type value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Isochrone_metric_type_entries, Isochrone_metric_type_entries_by_number,
          2, Isochrone_metric_type_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Isochrone_metric_type_entries, Isochrone_metric_type_entries_by_number, 2,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Isochrone_metric_type_strings[idx].get();
}

bool Isochrone_metric_type_Parse(absl::string_view name, Isochrone_metric_type* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Isochrone_metric_type_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Isochrone_metric_type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Isochrone_metric_type Isochrone::time;
constexpr Isochrone_metric_type Isochrone::distance;
constexpr Isochrone_metric_type Isochrone::metric_type_MIN;
constexpr Isochrone_metric_type Isochrone::metric_type_MAX;
constexpr int Isochrone::metric_type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Isochrone_Geometry::_Internal {
 public:
};

Isochrone_Geometry::Isochrone_Geometry(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Isochrone.Geometry)
}
inline PROTOBUF_NDEBUG_INLINE Isochrone_Geometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::Isochrone_Geometry& from_msg)
      : coords_{visibility, arena, from.coords_},
        _coords_cached_byte_size_{0},
        _cached_size_{0} {}

Isochrone_Geometry::Isochrone_Geometry(
    ::google::protobuf::Arena* arena,
    const Isochrone_Geometry& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Isochrone_Geometry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:valhalla.Isochrone.Geometry)
}
inline PROTOBUF_NDEBUG_INLINE Isochrone_Geometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : coords_{visibility, arena},
        _coords_cached_byte_size_{0},
        _cached_size_{0} {}

inline void Isochrone_Geometry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Isochrone_Geometry::~Isochrone_Geometry() {
  // @@protoc_insertion_point(destructor:valhalla.Isochrone.Geometry)
  SharedDtor(*this);
}
inline void Isochrone_Geometry::SharedDtor(MessageLite& self) {
  Isochrone_Geometry& this_ = static_cast<Isochrone_Geometry&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Isochrone_Geometry::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Isochrone_Geometry(arena);
}
constexpr auto Isochrone_Geometry::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Isochrone_Geometry, _impl_.coords_) +
          decltype(Isochrone_Geometry::_impl_.coords_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Isochrone_Geometry), alignof(Isochrone_Geometry), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Isochrone_Geometry::PlacementNew_,
                                 sizeof(Isochrone_Geometry),
                                 alignof(Isochrone_Geometry));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<28> Isochrone_Geometry::_class_data_ = {
    {
        &_Isochrone_Geometry_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Isochrone_Geometry::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Isochrone_Geometry>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Isochrone_Geometry::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Isochrone_Geometry>(), &Isochrone_Geometry::ByteSizeLong,
            &Isochrone_Geometry::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Isochrone_Geometry, _impl_._cached_size_),
        true,
    },
    "valhalla.Isochrone.Geometry",
};
const ::google::protobuf::internal::ClassData* Isochrone_Geometry::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Isochrone_Geometry::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::Isochrone_Geometry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated sint32 coords = 1 [packed = true];
    {::_pbi::TcParser::FastZ32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Isochrone_Geometry, _impl_.coords_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated sint32 coords = 1 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Isochrone_Geometry, _impl_.coords_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Isochrone_Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Isochrone.Geometry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coords_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Isochrone_Geometry::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Isochrone_Geometry& this_ = static_cast<const Isochrone_Geometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Isochrone_Geometry::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Isochrone_Geometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.Isochrone.Geometry)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated sint32 coords = 1 [packed = true];
          {
            int byte_size = this_._impl_._coords_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteSInt32Packed(
                  1, this_._internal_coords(), byte_size, target);
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.Isochrone.Geometry)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Isochrone_Geometry::ByteSizeLong(const MessageLite& base) {
          const Isochrone_Geometry& this_ = static_cast<const Isochrone_Geometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Isochrone_Geometry::ByteSizeLong() const {
          const Isochrone_Geometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.Isochrone.Geometry)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated sint32 coords = 1 [packed = true];
            {
              total_size +=
                  ::_pbi::WireFormatLite::SInt32SizeWithPackedTagSize(
                      this_._internal_coords(), 1,
                      this_._impl_._coords_cached_byte_size_);
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Isochrone_Geometry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Isochrone_Geometry*>(&to_msg);
  auto& from = static_cast<const Isochrone_Geometry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Isochrone.Geometry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_coords()->MergeFrom(from._internal_coords());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Isochrone_Geometry::CopyFrom(const Isochrone_Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Isochrone.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Isochrone_Geometry::InternalSwap(Isochrone_Geometry* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.coords_.InternalSwap(&other->_impl_.coords_);
}

// ===================================================================

class Isochrone_Contour::_Internal {
 public:
};

Isochrone_Contour::Isochrone_Contour(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Isochrone.Contour)
}
inline PROTOBUF_NDEBUG_INLINE Isochrone_Contour::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::Isochrone_Contour& from_msg)
      : geometries_{visibility, arena, from.geometries_},
        _cached_size_{0} {}

Isochrone_Contour::Isochrone_Contour(
    ::google::protobuf::Arena* arena,
    const Isochrone_Contour& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Isochrone_Contour* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:valhalla.Isochrone.Contour)
}
inline PROTOBUF_NDEBUG_INLINE Isochrone_Contour::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : geometries_{visibility, arena},
        _cached_size_{0} {}

inline void Isochrone_Contour::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Isochrone_Contour::~Isochrone_Contour() {
  // @@protoc_insertion_point(destructor:valhalla.Isochrone.Contour)
  SharedDtor(*this);
}
inline void Isochrone_Contour::SharedDtor(MessageLite& self) {
  Isochrone_Contour& this_ = static_cast<Isochrone_Contour&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Isochrone_Contour::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Isochrone_Contour(arena);
}
constexpr auto Isochrone_Contour::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Isochrone_Contour, _impl_.geometries_) +
          decltype(Isochrone_Contour::_impl_.geometries_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Isochrone_Contour), alignof(Isochrone_Contour), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Isochrone_Contour::PlacementNew_,
                                 sizeof(Isochrone_Contour),
                                 alignof(Isochrone_Contour));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<27> Isochrone_Contour::_class_data_ = {
    {
        &_Isochrone_Contour_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Isochrone_Contour::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Isochrone_Contour>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Isochrone_Contour::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Isochrone_Contour>(), &Isochrone_Contour::ByteSizeLong,
            &Isochrone_Contour::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Isochrone_Contour, _impl_._cached_size_),
        true,
    },
    "valhalla.Isochrone.Contour",
};
const ::google::protobuf::internal::ClassData* Isochrone_Contour::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Isochrone_Contour::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967293,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::Isochrone_Contour>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .valhalla.Isochrone.Geometry geometries = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Isochrone_Contour, _impl_.geometries_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .valhalla.Isochrone.Geometry geometries = 2;
    {PROTOBUF_FIELD_OFFSET(Isochrone_Contour, _impl_.geometries_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::Isochrone_Geometry>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Isochrone_Contour::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Isochrone.Contour)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.geometries_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Isochrone_Contour::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Isochrone_Contour& this_ = static_cast<const Isochrone_Contour&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Isochrone_Contour::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Isochrone_Contour& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.Isochrone.Contour)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .valhalla.Isochrone.Geometry geometries = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_geometries_size());
               i < n; i++) {
            const auto& repfield = this_._internal_geometries().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.Isochrone.Contour)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Isochrone_Contour::ByteSizeLong(const MessageLite& base) {
          const Isochrone_Contour& this_ = static_cast<const Isochrone_Contour&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Isochrone_Contour::ByteSizeLong() const {
          const Isochrone_Contour& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.Isochrone.Contour)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .valhalla.Isochrone.Geometry geometries = 2;
            {
              total_size += 1UL * this_._internal_geometries_size();
              for (const auto& msg : this_._internal_geometries()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Isochrone_Contour::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Isochrone_Contour*>(&to_msg);
  auto& from = static_cast<const Isochrone_Contour&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Isochrone.Contour)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_geometries()->MergeFrom(
      from._internal_geometries());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Isochrone_Contour::CopyFrom(const Isochrone_Contour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Isochrone.Contour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Isochrone_Contour::InternalSwap(Isochrone_Contour* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.geometries_.InternalSwap(&other->_impl_.geometries_);
}

// ===================================================================

class Isochrone_Interval::_Internal {
 public:
};

Isochrone_Interval::Isochrone_Interval(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Isochrone.Interval)
}
inline PROTOBUF_NDEBUG_INLINE Isochrone_Interval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::Isochrone_Interval& from_msg)
      : contours_{visibility, arena, from.contours_},
        _cached_size_{0} {}

Isochrone_Interval::Isochrone_Interval(
    ::google::protobuf::Arena* arena,
    const Isochrone_Interval& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Isochrone_Interval* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, metric_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, metric_),
           offsetof(Impl_, metric_value_) -
               offsetof(Impl_, metric_) +
               sizeof(Impl_::metric_value_));

  // @@protoc_insertion_point(copy_constructor:valhalla.Isochrone.Interval)
}
inline PROTOBUF_NDEBUG_INLINE Isochrone_Interval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : contours_{visibility, arena},
        _cached_size_{0} {}

inline void Isochrone_Interval::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, metric_),
           0,
           offsetof(Impl_, metric_value_) -
               offsetof(Impl_, metric_) +
               sizeof(Impl_::metric_value_));
}
Isochrone_Interval::~Isochrone_Interval() {
  // @@protoc_insertion_point(destructor:valhalla.Isochrone.Interval)
  SharedDtor(*this);
}
inline void Isochrone_Interval::SharedDtor(MessageLite& self) {
  Isochrone_Interval& this_ = static_cast<Isochrone_Interval&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Isochrone_Interval::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Isochrone_Interval(arena);
}
constexpr auto Isochrone_Interval::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Isochrone_Interval, _impl_.contours_) +
          decltype(Isochrone_Interval::_impl_.contours_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Isochrone_Interval), alignof(Isochrone_Interval), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Isochrone_Interval::PlacementNew_,
                                 sizeof(Isochrone_Interval),
                                 alignof(Isochrone_Interval));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<28> Isochrone_Interval::_class_data_ = {
    {
        &_Isochrone_Interval_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Isochrone_Interval::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Isochrone_Interval>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Isochrone_Interval::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Isochrone_Interval>(), &Isochrone_Interval::ByteSizeLong,
            &Isochrone_Interval::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Isochrone_Interval, _impl_._cached_size_),
        true,
    },
    "valhalla.Isochrone.Interval",
};
const ::google::protobuf::internal::ClassData* Isochrone_Interval::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Isochrone_Interval::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::Isochrone_Interval>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .valhalla.Isochrone.metric_type metric = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Isochrone_Interval, _impl_.metric_)}},
    // float metric_value = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Isochrone_Interval, _impl_.metric_value_)}},
    // repeated .valhalla.Isochrone.Contour contours = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Isochrone_Interval, _impl_.contours_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .valhalla.Isochrone.metric_type metric = 1;
    {PROTOBUF_FIELD_OFFSET(Isochrone_Interval, _impl_.metric_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float metric_value = 2;
    {PROTOBUF_FIELD_OFFSET(Isochrone_Interval, _impl_.metric_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated .valhalla.Isochrone.Contour contours = 3;
    {PROTOBUF_FIELD_OFFSET(Isochrone_Interval, _impl_.contours_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::Isochrone_Contour>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Isochrone_Interval::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Isochrone.Interval)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contours_.Clear();
  ::memset(&_impl_.metric_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.metric_value_) -
      reinterpret_cast<char*>(&_impl_.metric_)) + sizeof(_impl_.metric_value_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Isochrone_Interval::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Isochrone_Interval& this_ = static_cast<const Isochrone_Interval&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Isochrone_Interval::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Isochrone_Interval& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.Isochrone.Interval)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .valhalla.Isochrone.metric_type metric = 1;
          if (this_._internal_metric() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_metric(), target);
          }

          // float metric_value = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_metric_value()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_metric_value(), target);
          }

          // repeated .valhalla.Isochrone.Contour contours = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_contours_size());
               i < n; i++) {
            const auto& repfield = this_._internal_contours().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.Isochrone.Interval)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Isochrone_Interval::ByteSizeLong(const MessageLite& base) {
          const Isochrone_Interval& this_ = static_cast<const Isochrone_Interval&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Isochrone_Interval::ByteSizeLong() const {
          const Isochrone_Interval& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.Isochrone.Interval)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .valhalla.Isochrone.Contour contours = 3;
            {
              total_size += 1UL * this_._internal_contours_size();
              for (const auto& msg : this_._internal_contours()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .valhalla.Isochrone.metric_type metric = 1;
            if (this_._internal_metric() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_metric());
            }
            // float metric_value = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_metric_value()) != 0) {
              total_size += 5;
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Isochrone_Interval::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Isochrone_Interval*>(&to_msg);
  auto& from = static_cast<const Isochrone_Interval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Isochrone.Interval)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_contours()->MergeFrom(
      from._internal_contours());
  if (from._internal_metric() != 0) {
    _this->_impl_.metric_ = from._impl_.metric_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_metric_value()) != 0) {
    _this->_impl_.metric_value_ = from._impl_.metric_value_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Isochrone_Interval::CopyFrom(const Isochrone_Interval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Isochrone.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Isochrone_Interval::InternalSwap(Isochrone_Interval* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.contours_.InternalSwap(&other->_impl_.contours_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Isochrone_Interval, _impl_.metric_value_)
      + sizeof(Isochrone_Interval::_impl_.metric_value_)
      - PROTOBUF_FIELD_OFFSET(Isochrone_Interval, _impl_.metric_)>(
          reinterpret_cast<char*>(&_impl_.metric_),
          reinterpret_cast<char*>(&other->_impl_.metric_));
}

// ===================================================================

class Isochrone::_Internal {
 public:
};

Isochrone::Isochrone(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Isochrone)
}
inline PROTOBUF_NDEBUG_INLINE Isochrone::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::Isochrone& from_msg)
      : intervals_{visibility, arena, from.intervals_},
        _cached_size_{0} {}

Isochrone::Isochrone(
    ::google::protobuf::Arena* arena,
    const Isochrone& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Isochrone* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:valhalla.Isochrone)
}
inline PROTOBUF_NDEBUG_INLINE Isochrone::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : intervals_{visibility, arena},
        _cached_size_{0} {}

inline void Isochrone::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Isochrone::~Isochrone() {
  // @@protoc_insertion_point(destructor:valhalla.Isochrone)
  SharedDtor(*this);
}
inline void Isochrone::SharedDtor(MessageLite& self) {
  Isochrone& this_ = static_cast<Isochrone&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Isochrone::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Isochrone(arena);
}
constexpr auto Isochrone::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Isochrone, _impl_.intervals_) +
          decltype(Isochrone::_impl_.intervals_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Isochrone), alignof(Isochrone), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Isochrone::PlacementNew_,
                                 sizeof(Isochrone),
                                 alignof(Isochrone));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<19> Isochrone::_class_data_ = {
    {
        &_Isochrone_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Isochrone::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Isochrone>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Isochrone::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Isochrone>(), &Isochrone::ByteSizeLong,
            &Isochrone::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Isochrone, _impl_._cached_size_),
        true,
    },
    "valhalla.Isochrone",
};
const ::google::protobuf::internal::ClassData* Isochrone::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Isochrone::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::Isochrone>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .valhalla.Isochrone.Interval intervals = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Isochrone, _impl_.intervals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .valhalla.Isochrone.Interval intervals = 1;
    {PROTOBUF_FIELD_OFFSET(Isochrone, _impl_.intervals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::Isochrone_Interval>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Isochrone::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Isochrone)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intervals_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Isochrone::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Isochrone& this_ = static_cast<const Isochrone&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Isochrone::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Isochrone& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.Isochrone)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .valhalla.Isochrone.Interval intervals = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_intervals_size());
               i < n; i++) {
            const auto& repfield = this_._internal_intervals().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.Isochrone)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Isochrone::ByteSizeLong(const MessageLite& base) {
          const Isochrone& this_ = static_cast<const Isochrone&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Isochrone::ByteSizeLong() const {
          const Isochrone& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.Isochrone)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .valhalla.Isochrone.Interval intervals = 1;
            {
              total_size += 1UL * this_._internal_intervals_size();
              for (const auto& msg : this_._internal_intervals()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Isochrone::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Isochrone*>(&to_msg);
  auto& from = static_cast<const Isochrone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Isochrone)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_intervals()->MergeFrom(
      from._internal_intervals());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Isochrone::CopyFrom(const Isochrone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Isochrone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Isochrone::InternalSwap(Isochrone* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.intervals_.InternalSwap(&other->_impl_.intervals_);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
